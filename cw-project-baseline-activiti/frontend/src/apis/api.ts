/// <reference path="./custom.d.ts" />
// tslint:disable
/**
 * X1 Service API
 * api txType X1 service
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


import * as url from "url";
import * as portableFetch from "portable-fetch";
import { Configuration } from "./configuration";

const BASE_PATH = "http://TNC0019P:8888".replace(/\/+$/, "");

/**
 *
 * @export
 */
export const COLLECTION_FORMATS = {
    csv: ",",
    ssv: " ",
    tsv: "\t",
    pipes: "|",
};

/**
 *
 * @export
 * @interface FetchAPI
 */
export interface FetchAPI {
    (url: string, init?: any): Promise<Response>;
}

/**
 *  
 * @export
 * @interface FetchArgs
 */
export interface FetchArgs {
    url: string;
    options: any;
}

/**
 * 
 * @export
 * @class BaseAPI
 */
export class BaseAPI {
    protected configuration: Configuration;

    constructor(configuration?: Configuration, protected basePath: string = BASE_PATH, protected fetch: FetchAPI = portableFetch) {
        if (configuration) {
            this.configuration = configuration;
            this.basePath = configuration.basePath || this.basePath;
        }
    }
};

/**
 * 
 * @export
 * @class RequiredError
 * @extends {Error}
 */
export class RequiredError extends Error {
    name: "RequiredError"
    constructor(public field: string, msg?: string) {
        super(msg);
    }
}

/**
 * Embedded collection of Object[]
 * @export
 * @interface EmbeddedCollectionOfArrayOfobject
 */
export interface EmbeddedCollectionOfArrayOfobject {
    /**
     * Resource collection
     * @type {Array<Array<any>>}
     * @memberof EmbeddedCollectionOfArrayOfobject
     */
    objects: Array<Array<any>>;
}

/**
 * Embedded collection of XAuthority
 * @export
 * @interface EmbeddedCollectionOfXAuthority
 */
export interface EmbeddedCollectionOfXAuthority {
    /**
     * Resource collection
     * @type {Array<XAuthority>}
     * @memberof EmbeddedCollectionOfXAuthority
     */
    xAuthorities: Array<XAuthority>;
}

/**
 * Embedded collection of XGroup
 * @export
 * @interface EmbeddedCollectionOfXGroup
 */
export interface EmbeddedCollectionOfXGroup {
    /**
     * Resource collection
     * @type {Array<XGroup>}
     * @memberof EmbeddedCollectionOfXGroup
     */
    xGroups: Array<XGroup>;
}

/**
 * Embedded collection of XGroupAuthority
 * @export
 * @interface EmbeddedCollectionOfXGroupAuthority
 */
export interface EmbeddedCollectionOfXGroupAuthority {
    /**
     * Resource collection
     * @type {Array<XGroupAuthority>}
     * @memberof EmbeddedCollectionOfXGroupAuthority
     */
    xGroupAuthorities: Array<XGroupAuthority>;
}

/**
 * Embedded collection of XGroupMember
 * @export
 * @interface EmbeddedCollectionOfXGroupMember
 */
export interface EmbeddedCollectionOfXGroupMember {
    /**
     * Resource collection
     * @type {Array<XGroupMember>}
     * @memberof EmbeddedCollectionOfXGroupMember
     */
    xGroupMembers: Array<XGroupMember>;
}

/**
 * Embedded collection of XUser
 * @export
 * @interface EmbeddedCollectionOfXUser
 */
export interface EmbeddedCollectionOfXUser {
    /**
     * Resource collection
     * @type {Array<XUser>}
     * @memberof EmbeddedCollectionOfXUser
     */
    xUsers: Array<XUser>;
}

/**
 * 
 * @export
 * @interface GroupDTO
 */
export interface GroupDTO {
    /**
     * 
     * @type {Array<XGroupAuthority>}
     * @memberof GroupDTO
     */
    authList?: Array<XGroupAuthority>;
    /**
     * 
     * @type {XGroup}
     * @memberof GroupDTO
     */
    group?: XGroup;
    /**
     * 
     * @type {Array<XUser>}
     * @memberof GroupDTO
     */
    users?: Array<XUser>;
}

/**
 * 
 * @export
 * @interface Link
 */
export interface Link {
    /**
     * 
     * @type {string}
     * @memberof Link
     */
    deprecation?: string;
    /**
     * 
     * @type {string}
     * @memberof Link
     */
    href?: string;
    /**
     * 
     * @type {string}
     * @memberof Link
     */
    hreflang?: string;
    /**
     * 
     * @type {string}
     * @memberof Link
     */
    media?: string;
    /**
     * 
     * @type {string}
     * @memberof Link
     */
    rel?: string;
    /**
     * 
     * @type {boolean}
     * @memberof Link
     */
    templated?: boolean;
    /**
     * 
     * @type {string}
     * @memberof Link
     */
    title?: string;
    /**
     * 
     * @type {string}
     * @memberof Link
     */
    type?: string;
}

/**
 * 
 * @export
 * @interface ResourceOfXAuthority
 */
export interface ResourceOfXAuthority {
    /**
     * 
     * @type {string}
     * @memberof ResourceOfXAuthority
     */
    authority?: string;
    /**
     * 
     * @type {Date}
     * @memberof ResourceOfXAuthority
     */
    created?: Date;
    /**
     * 
     * @type {string}
     * @memberof ResourceOfXAuthority
     */
    description?: string;
    /**
     * 
     * @type {number}
     * @memberof ResourceOfXAuthority
     */
    id?: number;
    /**
     * 
     * @type {Array<Link>}
     * @memberof ResourceOfXAuthority
     */
    links?: Array<Link>;
    /**
     * 
     * @type {string}
     * @memberof ResourceOfXAuthority
     */
    metadata?: string;
    /**
     * 
     * @type {XUser}
     * @memberof ResourceOfXAuthority
     */
    user?: XUser;
}

/**
 * 
 * @export
 * @interface ResourceOfXGroup
 */
export interface ResourceOfXGroup {
    /**
     * 
     * @type {Date}
     * @memberof ResourceOfXGroup
     */
    created?: Date;
    /**
     * 
     * @type {string}
     * @memberof ResourceOfXGroup
     */
    description?: string;
    /**
     * 
     * @type {string}
     * @memberof ResourceOfXGroup
     */
    iconUrl?: string;
    /**
     * 
     * @type {number}
     * @memberof ResourceOfXGroup
     */
    id?: number;
    /**
     * 
     * @type {Array<Link>}
     * @memberof ResourceOfXGroup
     */
    links?: Array<Link>;
    /**
     * 
     * @type {string}
     * @memberof ResourceOfXGroup
     */
    metadata?: string;
    /**
     * 
     * @type {string}
     * @memberof ResourceOfXGroup
     */
    name?: string;
}

/**
 * 
 * @export
 * @interface ResourceOfXGroupAuthority
 */
export interface ResourceOfXGroupAuthority {
    /**
     * 
     * @type {string}
     * @memberof ResourceOfXGroupAuthority
     */
    authority?: string;
    /**
     * 
     * @type {Date}
     * @memberof ResourceOfXGroupAuthority
     */
    created?: Date;
    /**
     * 
     * @type {string}
     * @memberof ResourceOfXGroupAuthority
     */
    description?: string;
    /**
     * 
     * @type {XGroup}
     * @memberof ResourceOfXGroupAuthority
     */
    group?: XGroup;
    /**
     * 
     * @type {number}
     * @memberof ResourceOfXGroupAuthority
     */
    id?: number;
    /**
     * 
     * @type {Array<Link>}
     * @memberof ResourceOfXGroupAuthority
     */
    links?: Array<Link>;
    /**
     * 
     * @type {string}
     * @memberof ResourceOfXGroupAuthority
     */
    metadata?: string;
}

/**
 * 
 * @export
 * @interface ResourceOfXGroupMember
 */
export interface ResourceOfXGroupMember {
    /**
     * 
     * @type {Date}
     * @memberof ResourceOfXGroupMember
     */
    created?: Date;
    /**
     * 
     * @type {string}
     * @memberof ResourceOfXGroupMember
     */
    description?: string;
    /**
     * 
     * @type {XGroup}
     * @memberof ResourceOfXGroupMember
     */
    group?: XGroup;
    /**
     * 
     * @type {number}
     * @memberof ResourceOfXGroupMember
     */
    id?: number;
    /**
     * 
     * @type {Array<Link>}
     * @memberof ResourceOfXGroupMember
     */
    links?: Array<Link>;
    /**
     * 
     * @type {string}
     * @memberof ResourceOfXGroupMember
     */
    metadata?: string;
    /**
     * 
     * @type {string}
     * @memberof ResourceOfXGroupMember
     */
    username?: string;
}

/**
 * 
 * @export
 * @interface ResourceOfXUser
 */
export interface ResourceOfXUser {
    /**
     * 
     * @type {XContact}
     * @memberof ResourceOfXUser
     */
    contact?: XContact;
    /**
     * 
     * @type {Date}
     * @memberof ResourceOfXUser
     */
    created?: Date;
    /**
     * 
     * @type {string}
     * @memberof ResourceOfXUser
     */
    description?: string;
    /**
     * 
     * @type {boolean}
     * @memberof ResourceOfXUser
     */
    enable?: boolean;
    /**
     * 
     * @type {number}
     * @memberof ResourceOfXUser
     */
    id?: number;
    /**
     * 
     * @type {Array<Link>}
     * @memberof ResourceOfXUser
     */
    links?: Array<Link>;
    /**
     * 
     * @type {string}
     * @memberof ResourceOfXUser
     */
    metadata?: string;
    /**
     * 
     * @type {string}
     * @memberof ResourceOfXUser
     */
    password?: string;
    /**
     * 
     * @type {string}
     * @memberof ResourceOfXUser
     */
    username?: string;
}

/**
 * Resources of Object[]
 * @export
 * @interface ResourcesOfArrayOfobject
 */
export interface ResourcesOfArrayOfobject {
    /**
     * 
     * @type {EmbeddedCollectionOfArrayOfobject}
     * @memberof ResourcesOfArrayOfobject
     */
    embedded: EmbeddedCollectionOfArrayOfobject;
    /**
     * Link collection
     * @type {{ [key: string]: Link; }}
     * @memberof ResourcesOfArrayOfobject
     */
    links: { [key: string]: Link; };
}

/**
 * Resources of XAuthority
 * @export
 * @interface ResourcesOfXAuthority
 */
export interface ResourcesOfXAuthority {
    /**
     * 
     * @type {EmbeddedCollectionOfXAuthority}
     * @memberof ResourcesOfXAuthority
     */
    embedded: EmbeddedCollectionOfXAuthority;
    /**
     * Link collection
     * @type {{ [key: string]: Link; }}
     * @memberof ResourcesOfXAuthority
     */
    links: { [key: string]: Link; };
}

/**
 * Resources of XGroup
 * @export
 * @interface ResourcesOfXGroup
 */
export interface ResourcesOfXGroup {
    /**
     * 
     * @type {EmbeddedCollectionOfXGroup}
     * @memberof ResourcesOfXGroup
     */
    embedded: EmbeddedCollectionOfXGroup;
    /**
     * Link collection
     * @type {{ [key: string]: Link; }}
     * @memberof ResourcesOfXGroup
     */
    links: { [key: string]: Link; };
}

/**
 * Resources of XGroupAuthority
 * @export
 * @interface ResourcesOfXGroupAuthority
 */
export interface ResourcesOfXGroupAuthority {
    /**
     * 
     * @type {EmbeddedCollectionOfXGroupAuthority}
     * @memberof ResourcesOfXGroupAuthority
     */
    embedded: EmbeddedCollectionOfXGroupAuthority;
    /**
     * Link collection
     * @type {{ [key: string]: Link; }}
     * @memberof ResourcesOfXGroupAuthority
     */
    links: { [key: string]: Link; };
}

/**
 * Resources of XGroupMember
 * @export
 * @interface ResourcesOfXGroupMember
 */
export interface ResourcesOfXGroupMember {
    /**
     * 
     * @type {EmbeddedCollectionOfXGroupMember}
     * @memberof ResourcesOfXGroupMember
     */
    embedded: EmbeddedCollectionOfXGroupMember;
    /**
     * Link collection
     * @type {{ [key: string]: Link; }}
     * @memberof ResourcesOfXGroupMember
     */
    links: { [key: string]: Link; };
}

/**
 * Resources of XUser
 * @export
 * @interface ResourcesOfXUser
 */
export interface ResourcesOfXUser {
    /**
     * 
     * @type {EmbeddedCollectionOfXUser}
     * @memberof ResourcesOfXUser
     */
    embedded: EmbeddedCollectionOfXUser;
    /**
     * Link collection
     * @type {{ [key: string]: Link; }}
     * @memberof ResourcesOfXUser
     */
    links: { [key: string]: Link; };
}

/**
 * 
 * @export
 * @interface ServiceRespDTOOfGroupDTO
 */
export interface ServiceRespDTOOfGroupDTO {
    /**
     * 
     * @type {GroupDTO}
     * @memberof ServiceRespDTOOfGroupDTO
     */
    data?: GroupDTO;
    /**
     * 
     * @type {string}
     * @memberof ServiceRespDTOOfGroupDTO
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof ServiceRespDTOOfGroupDTO
     */
    msg?: string;
    /**
     * 
     * @type {string}
     * @memberof ServiceRespDTOOfGroupDTO
     */
    status?: ServiceRespDTOOfGroupDTO.StatusEnum;
    /**
     * 
     * @type {Date}
     * @memberof ServiceRespDTOOfGroupDTO
     */
    time?: Date;
}

/**
 * @export
 * @namespace ServiceRespDTOOfGroupDTO
 */
export namespace ServiceRespDTOOfGroupDTO {
    /**
     * @export
     * @enum {string}
     */
    export enum StatusEnum {
        Success = <any> 'success',
        Fail = <any> 'fail'
    }
}

/**
 * 
 * @export
 * @interface ServiceRespDTOOfListOfGroupDTO
 */
export interface ServiceRespDTOOfListOfGroupDTO {
    /**
     * 
     * @type {Array<GroupDTO>}
     * @memberof ServiceRespDTOOfListOfGroupDTO
     */
    data?: Array<GroupDTO>;
    /**
     * 
     * @type {string}
     * @memberof ServiceRespDTOOfListOfGroupDTO
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof ServiceRespDTOOfListOfGroupDTO
     */
    msg?: string;
    /**
     * 
     * @type {string}
     * @memberof ServiceRespDTOOfListOfGroupDTO
     */
    status?: ServiceRespDTOOfListOfGroupDTO.StatusEnum;
    /**
     * 
     * @type {Date}
     * @memberof ServiceRespDTOOfListOfGroupDTO
     */
    time?: Date;
}

/**
 * @export
 * @namespace ServiceRespDTOOfListOfGroupDTO
 */
export namespace ServiceRespDTOOfListOfGroupDTO {
    /**
     * @export
     * @enum {string}
     */
    export enum StatusEnum {
        Success = <any> 'success',
        Fail = <any> 'fail'
    }
}

/**
 * 
 * @export
 * @interface ServiceRespDTOOfListOfUploadFileDTO
 */
export interface ServiceRespDTOOfListOfUploadFileDTO {
    /**
     * 
     * @type {Array<UploadFileDTO>}
     * @memberof ServiceRespDTOOfListOfUploadFileDTO
     */
    data?: Array<UploadFileDTO>;
    /**
     * 
     * @type {string}
     * @memberof ServiceRespDTOOfListOfUploadFileDTO
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof ServiceRespDTOOfListOfUploadFileDTO
     */
    msg?: string;
    /**
     * 
     * @type {string}
     * @memberof ServiceRespDTOOfListOfUploadFileDTO
     */
    status?: ServiceRespDTOOfListOfUploadFileDTO.StatusEnum;
    /**
     * 
     * @type {Date}
     * @memberof ServiceRespDTOOfListOfUploadFileDTO
     */
    time?: Date;
}

/**
 * @export
 * @namespace ServiceRespDTOOfListOfUploadFileDTO
 */
export namespace ServiceRespDTOOfListOfUploadFileDTO {
    /**
     * @export
     * @enum {string}
     */
    export enum StatusEnum {
        Success = <any> 'success',
        Fail = <any> 'fail'
    }
}

/**
 * 
 * @export
 * @interface ServiceRespDTOOfUploadFileDTO
 */
export interface ServiceRespDTOOfUploadFileDTO {
    /**
     * 
     * @type {UploadFileDTO}
     * @memberof ServiceRespDTOOfUploadFileDTO
     */
    data?: UploadFileDTO;
    /**
     * 
     * @type {string}
     * @memberof ServiceRespDTOOfUploadFileDTO
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof ServiceRespDTOOfUploadFileDTO
     */
    msg?: string;
    /**
     * 
     * @type {string}
     * @memberof ServiceRespDTOOfUploadFileDTO
     */
    status?: ServiceRespDTOOfUploadFileDTO.StatusEnum;
    /**
     * 
     * @type {Date}
     * @memberof ServiceRespDTOOfUploadFileDTO
     */
    time?: Date;
}

/**
 * @export
 * @namespace ServiceRespDTOOfUploadFileDTO
 */
export namespace ServiceRespDTOOfUploadFileDTO {
    /**
     * @export
     * @enum {string}
     */
    export enum StatusEnum {
        Success = <any> 'success',
        Fail = <any> 'fail'
    }
}

/**
 * 
 * @export
 * @interface ServiceRespDTOOfUserDTO
 */
export interface ServiceRespDTOOfUserDTO {
    /**
     * 
     * @type {UserDTO}
     * @memberof ServiceRespDTOOfUserDTO
     */
    data?: UserDTO;
    /**
     * 
     * @type {string}
     * @memberof ServiceRespDTOOfUserDTO
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof ServiceRespDTOOfUserDTO
     */
    msg?: string;
    /**
     * 
     * @type {string}
     * @memberof ServiceRespDTOOfUserDTO
     */
    status?: ServiceRespDTOOfUserDTO.StatusEnum;
    /**
     * 
     * @type {Date}
     * @memberof ServiceRespDTOOfUserDTO
     */
    time?: Date;
}

/**
 * @export
 * @namespace ServiceRespDTOOfUserDTO
 */
export namespace ServiceRespDTOOfUserDTO {
    /**
     * @export
     * @enum {string}
     */
    export enum StatusEnum {
        Success = <any> 'success',
        Fail = <any> 'fail'
    }
}

/**
 * 
 * @export
 * @interface UploadFileDTO
 */
export interface UploadFileDTO {
    /**
     * 
     * @type {string}
     * @memberof UploadFileDTO
     */
    fileDownloadUri?: string;
    /**
     * 
     * @type {string}
     * @memberof UploadFileDTO
     */
    fileName?: string;
    /**
     * 
     * @type {string}
     * @memberof UploadFileDTO
     */
    fileType?: string;
    /**
     * 
     * @type {number}
     * @memberof UploadFileDTO
     */
    size?: number;
}

/**
 * 
 * @export
 * @interface UserDTO
 */
export interface UserDTO {
    /**
     * 
     * @type {Array<XGroupAuthority>}
     * @memberof UserDTO
     */
    authList?: Array<XGroupAuthority>;
    /**
     * 
     * @type {XGroup}
     * @memberof UserDTO
     */
    group?: XGroup;
    /**
     * 
     * @type {XUser}
     * @memberof UserDTO
     */
    user?: XUser;
}

/**
 * 
 * @export
 * @interface XAuthority
 */
export interface XAuthority {
    /**
     * 
     * @type {string}
     * @memberof XAuthority
     */
    authority?: string;
    /**
     * 
     * @type {Date}
     * @memberof XAuthority
     */
    created?: Date;
    /**
     * 
     * @type {string}
     * @memberof XAuthority
     */
    description?: string;
    /**
     * 
     * @type {number}
     * @memberof XAuthority
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof XAuthority
     */
    metadata?: string;
    /**
     * 
     * @type {XUser}
     * @memberof XAuthority
     */
    user?: XUser;
}

/**
 * 
 * @export
 * @interface XContact
 */
export interface XContact {
    /**
     * 
     * @type {string}
     * @memberof XContact
     */
    email?: string;
    /**
     * 
     * @type {string}
     * @memberof XContact
     */
    iconUrl?: string;
    /**
     * 
     * @type {string}
     * @memberof XContact
     */
    phone?: string;
    /**
     * 
     * @type {string}
     * @memberof XContact
     */
    realName?: string;
}

/**
 * 
 * @export
 * @interface XGroup
 */
export interface XGroup {
    /**
     * 
     * @type {Date}
     * @memberof XGroup
     */
    created?: Date;
    /**
     * 
     * @type {string}
     * @memberof XGroup
     */
    description?: string;
    /**
     * 
     * @type {string}
     * @memberof XGroup
     */
    iconUrl?: string;
    /**
     * 
     * @type {number}
     * @memberof XGroup
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof XGroup
     */
    metadata?: string;
    /**
     * 
     * @type {string}
     * @memberof XGroup
     */
    name?: string;
}

/**
 * 
 * @export
 * @interface XGroupAuthority
 */
export interface XGroupAuthority {
    /**
     * 
     * @type {string}
     * @memberof XGroupAuthority
     */
    authority?: string;
    /**
     * 
     * @type {Date}
     * @memberof XGroupAuthority
     */
    created?: Date;
    /**
     * 
     * @type {string}
     * @memberof XGroupAuthority
     */
    description?: string;
    /**
     * 
     * @type {XGroup}
     * @memberof XGroupAuthority
     */
    group?: XGroup;
    /**
     * 
     * @type {number}
     * @memberof XGroupAuthority
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof XGroupAuthority
     */
    metadata?: string;
}

/**
 * 
 * @export
 * @interface XGroupMember
 */
export interface XGroupMember {
    /**
     * 
     * @type {Date}
     * @memberof XGroupMember
     */
    created?: Date;
    /**
     * 
     * @type {string}
     * @memberof XGroupMember
     */
    description?: string;
    /**
     * 
     * @type {XGroup}
     * @memberof XGroupMember
     */
    group?: XGroup;
    /**
     * 
     * @type {number}
     * @memberof XGroupMember
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof XGroupMember
     */
    metadata?: string;
    /**
     * 
     * @type {string}
     * @memberof XGroupMember
     */
    username?: string;
}

/**
 * 
 * @export
 * @interface XUser
 */
export interface XUser {
    /**
     * 
     * @type {XContact}
     * @memberof XUser
     */
    contact?: XContact;
    /**
     * 
     * @type {Date}
     * @memberof XUser
     */
    created?: Date;
    /**
     * 
     * @type {string}
     * @memberof XUser
     */
    description?: string;
    /**
     * 
     * @type {boolean}
     * @memberof XUser
     */
    enable?: boolean;
    /**
     * 
     * @type {number}
     * @memberof XUser
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof XUser
     */
    metadata?: string;
    /**
     * 
     * @type {string}
     * @memberof XUser
     */
    password?: string;
    /**
     * 
     * @type {string}
     * @memberof XUser
     */
    username?: string;
}


/**
 * AdminCtrlApi - fetch parameter creator
 * @export
 */
export const AdminCtrlApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Add users into group
         * @param {string} groupName group-name
         * @param {Array<XUser>} users users
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addUsersIntoGroupUsingPOST(groupName: string, users: Array<XUser>, options: any = {}): FetchArgs {
            // verify required parameter 'groupName' is not null or undefined
            if (groupName === null || groupName === undefined) {
                throw new RequiredError('groupName','Required parameter groupName was null or undefined when calling addUsersIntoGroupUsingPOST.');
            }
            // verify required parameter 'users' is not null or undefined
            if (users === null || users === undefined) {
                throw new RequiredError('users','Required parameter users was null or undefined when calling addUsersIntoGroupUsingPOST.');
            }
            const localVarPath = `/api/admin/groups/{group-name}`
                .replace(`{${"group-name"}}`, encodeURIComponent(String(groupName)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"Array&lt;XUser&gt;" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(users || {}) : (users || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary current user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCurrentUserUsingGET(options: any = {}): FetchArgs {
            const localVarPath = `/api/admin/current-user`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary get all users by group
         * @param {Array<string>} grps grps
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsersByGroupsUsingGET(grps: Array<string>, options: any = {}): FetchArgs {
            // verify required parameter 'grps' is not null or undefined
            if (grps === null || grps === undefined) {
                throw new RequiredError('grps','Required parameter grps was null or undefined when calling getUsersByGroupsUsingGET.');
            }
            const localVarPath = `/api/admin/groups`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (grps) {
                localVarQueryParameter['grps'] = grps;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary admin api endpoint info
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        infoUsingGET(options: any = {}): FetchArgs {
            const localVarPath = `/api/admin/info`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary remove users from group
         * @param {string} groupName group-name
         * @param {Array<XUser>} users users
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        remveUsersFromGroupUsingDELETE(groupName: string, users: Array<XUser>, options: any = {}): FetchArgs {
            // verify required parameter 'groupName' is not null or undefined
            if (groupName === null || groupName === undefined) {
                throw new RequiredError('groupName','Required parameter groupName was null or undefined when calling remveUsersFromGroupUsingDELETE.');
            }
            // verify required parameter 'users' is not null or undefined
            if (users === null || users === undefined) {
                throw new RequiredError('users','Required parameter users was null or undefined when calling remveUsersFromGroupUsingDELETE.');
            }
            const localVarPath = `/api/admin/groups/{group-name}`
                .replace(`{${"group-name"}}`, encodeURIComponent(String(groupName)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"Array&lt;XUser&gt;" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(users || {}) : (users || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary create user
         * @param {string} groupName group-name
         * @param {XUser} user user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saveUsingPOST(groupName: string, user: XUser, options: any = {}): FetchArgs {
            // verify required parameter 'groupName' is not null or undefined
            if (groupName === null || groupName === undefined) {
                throw new RequiredError('groupName','Required parameter groupName was null or undefined when calling saveUsingPOST.');
            }
            // verify required parameter 'user' is not null or undefined
            if (user === null || user === undefined) {
                throw new RequiredError('user','Required parameter user was null or undefined when calling saveUsingPOST.');
            }
            const localVarPath = `/api/admin/groups/{group-name}/save-user`
                .replace(`{${"group-name"}}`, encodeURIComponent(String(groupName)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"XUser" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(user || {}) : (user || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AdminCtrlApi - functional programming interface
 * @export
 */
export const AdminCtrlApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Add users into group
         * @param {string} groupName group-name
         * @param {Array<XUser>} users users
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addUsersIntoGroupUsingPOST(groupName: string, users: Array<XUser>, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ServiceRespDTOOfGroupDTO> {
            const localVarFetchArgs = AdminCtrlApiFetchParamCreator(configuration).addUsersIntoGroupUsingPOST(groupName, users, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary current user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCurrentUserUsingGET(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ServiceRespDTOOfUserDTO> {
            const localVarFetchArgs = AdminCtrlApiFetchParamCreator(configuration).getCurrentUserUsingGET(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary get all users by group
         * @param {Array<string>} grps grps
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsersByGroupsUsingGET(grps: Array<string>, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ServiceRespDTOOfListOfGroupDTO> {
            const localVarFetchArgs = AdminCtrlApiFetchParamCreator(configuration).getUsersByGroupsUsingGET(grps, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary admin api endpoint info
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        infoUsingGET(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<string> {
            const localVarFetchArgs = AdminCtrlApiFetchParamCreator(configuration).infoUsingGET(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary remove users from group
         * @param {string} groupName group-name
         * @param {Array<XUser>} users users
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        remveUsersFromGroupUsingDELETE(groupName: string, users: Array<XUser>, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ServiceRespDTOOfGroupDTO> {
            const localVarFetchArgs = AdminCtrlApiFetchParamCreator(configuration).remveUsersFromGroupUsingDELETE(groupName, users, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary create user
         * @param {string} groupName group-name
         * @param {XUser} user user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saveUsingPOST(groupName: string, user: XUser, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ServiceRespDTOOfUserDTO> {
            const localVarFetchArgs = AdminCtrlApiFetchParamCreator(configuration).saveUsingPOST(groupName, user, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * AdminCtrlApi - factory interface
 * @export
 */
export const AdminCtrlApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @summary Add users into group
         * @param {string} groupName group-name
         * @param {Array<XUser>} users users
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addUsersIntoGroupUsingPOST(groupName: string, users: Array<XUser>, options?: any) {
            return AdminCtrlApiFp(configuration).addUsersIntoGroupUsingPOST(groupName, users, options)(fetch, basePath);
        },
        /**
         * 
         * @summary current user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCurrentUserUsingGET(options?: any) {
            return AdminCtrlApiFp(configuration).getCurrentUserUsingGET(options)(fetch, basePath);
        },
        /**
         * 
         * @summary get all users by group
         * @param {Array<string>} grps grps
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsersByGroupsUsingGET(grps: Array<string>, options?: any) {
            return AdminCtrlApiFp(configuration).getUsersByGroupsUsingGET(grps, options)(fetch, basePath);
        },
        /**
         * 
         * @summary admin api endpoint info
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        infoUsingGET(options?: any) {
            return AdminCtrlApiFp(configuration).infoUsingGET(options)(fetch, basePath);
        },
        /**
         * 
         * @summary remove users from group
         * @param {string} groupName group-name
         * @param {Array<XUser>} users users
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        remveUsersFromGroupUsingDELETE(groupName: string, users: Array<XUser>, options?: any) {
            return AdminCtrlApiFp(configuration).remveUsersFromGroupUsingDELETE(groupName, users, options)(fetch, basePath);
        },
        /**
         * 
         * @summary create user
         * @param {string} groupName group-name
         * @param {XUser} user user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saveUsingPOST(groupName: string, user: XUser, options?: any) {
            return AdminCtrlApiFp(configuration).saveUsingPOST(groupName, user, options)(fetch, basePath);
        },
    };
};

/**
 * AdminCtrlApi - object-oriented interface
 * @export
 * @class AdminCtrlApi
 * @extends {BaseAPI}
 */
export class AdminCtrlApi extends BaseAPI {
    /**
     * 
     * @summary Add users into group
     * @param {string} groupName group-name
     * @param {Array<XUser>} users users
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminCtrlApi
     */
    public addUsersIntoGroupUsingPOST(groupName: string, users: Array<XUser>, options?: any) {
        return AdminCtrlApiFp(this.configuration).addUsersIntoGroupUsingPOST(groupName, users, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary current user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminCtrlApi
     */
    public getCurrentUserUsingGET(options?: any) {
        return AdminCtrlApiFp(this.configuration).getCurrentUserUsingGET(options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary get all users by group
     * @param {Array<string>} grps grps
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminCtrlApi
     */
    public getUsersByGroupsUsingGET(grps: Array<string>, options?: any) {
        return AdminCtrlApiFp(this.configuration).getUsersByGroupsUsingGET(grps, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary admin api endpoint info
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminCtrlApi
     */
    public infoUsingGET(options?: any) {
        return AdminCtrlApiFp(this.configuration).infoUsingGET(options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary remove users from group
     * @param {string} groupName group-name
     * @param {Array<XUser>} users users
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminCtrlApi
     */
    public remveUsersFromGroupUsingDELETE(groupName: string, users: Array<XUser>, options?: any) {
        return AdminCtrlApiFp(this.configuration).remveUsersFromGroupUsingDELETE(groupName, users, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary create user
     * @param {string} groupName group-name
     * @param {XUser} user user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminCtrlApi
     */
    public saveUsingPOST(groupName: string, user: XUser, options?: any) {
        return AdminCtrlApiFp(this.configuration).saveUsingPOST(groupName, user, options)(this.fetch, this.basePath);
    }

}

/**
 * FileUploadCtrlApi - fetch parameter creator
 * @export
 */
export const FileUploadCtrlApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary upload files to backend
         * @param {any} file file
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadFileUsingPOST(file: any, options: any = {}): FetchArgs {
            // verify required parameter 'file' is not null or undefined
            if (file === null || file === undefined) {
                throw new RequiredError('file','Required parameter file was null or undefined when calling uploadFileUsingPOST.');
            }
            const localVarPath = `/api/files/upload-file`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new url.URLSearchParams();

            if (file !== undefined) {
                localVarFormParams.set('file', file as any);
            }

            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            localVarRequestOptions.body = localVarFormParams.toString();

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary upload files to backend
         * @param {Array<any>} files files
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadMultipleFilesUsingPOST(files: Array<any>, options: any = {}): FetchArgs {
            // verify required parameter 'files' is not null or undefined
            if (files === null || files === undefined) {
                throw new RequiredError('files','Required parameter files was null or undefined when calling uploadMultipleFilesUsingPOST.');
            }
            const localVarPath = `/api/files/upload-files`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new url.URLSearchParams();

            if (files) {
                files.forEach((element) => {
                    localVarFormParams.append('files', element as any);
                })
            }

            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            localVarRequestOptions.body = localVarFormParams.toString();

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * FileUploadCtrlApi - functional programming interface
 * @export
 */
export const FileUploadCtrlApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary upload files to backend
         * @param {any} file file
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadFileUsingPOST(file: any, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ServiceRespDTOOfUploadFileDTO> {
            const localVarFetchArgs = FileUploadCtrlApiFetchParamCreator(configuration).uploadFileUsingPOST(file, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary upload files to backend
         * @param {Array<any>} files files
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadMultipleFilesUsingPOST(files: Array<any>, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ServiceRespDTOOfListOfUploadFileDTO> {
            const localVarFetchArgs = FileUploadCtrlApiFetchParamCreator(configuration).uploadMultipleFilesUsingPOST(files, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * FileUploadCtrlApi - factory interface
 * @export
 */
export const FileUploadCtrlApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @summary upload files to backend
         * @param {any} file file
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadFileUsingPOST(file: any, options?: any) {
            return FileUploadCtrlApiFp(configuration).uploadFileUsingPOST(file, options)(fetch, basePath);
        },
        /**
         * 
         * @summary upload files to backend
         * @param {Array<any>} files files
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadMultipleFilesUsingPOST(files: Array<any>, options?: any) {
            return FileUploadCtrlApiFp(configuration).uploadMultipleFilesUsingPOST(files, options)(fetch, basePath);
        },
    };
};

/**
 * FileUploadCtrlApi - object-oriented interface
 * @export
 * @class FileUploadCtrlApi
 * @extends {BaseAPI}
 */
export class FileUploadCtrlApi extends BaseAPI {
    /**
     * 
     * @summary upload files to backend
     * @param {any} file file
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FileUploadCtrlApi
     */
    public uploadFileUsingPOST(file: any, options?: any) {
        return FileUploadCtrlApiFp(this.configuration).uploadFileUsingPOST(file, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary upload files to backend
     * @param {Array<any>} files files
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FileUploadCtrlApi
     */
    public uploadMultipleFilesUsingPOST(files: Array<any>, options?: any) {
        return FileUploadCtrlApiFp(this.configuration).uploadMultipleFilesUsingPOST(files, options)(this.fetch, this.basePath);
    }

}

/**
 * OperatorCtrlApi - fetch parameter creator
 * @export
 */
export const OperatorCtrlApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary GROUP_OPERATOR api endpoint info
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        infoUsingGET1(options: any = {}): FetchArgs {
            const localVarPath = `/api/GROUP_OPERATOR/info`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * OperatorCtrlApi - functional programming interface
 * @export
 */
export const OperatorCtrlApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary GROUP_OPERATOR api endpoint info
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        infoUsingGET1(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<string> {
            const localVarFetchArgs = OperatorCtrlApiFetchParamCreator(configuration).infoUsingGET1(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * OperatorCtrlApi - factory interface
 * @export
 */
export const OperatorCtrlApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @summary GROUP_OPERATOR api endpoint info
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        infoUsingGET1(options?: any) {
            return OperatorCtrlApiFp(configuration).infoUsingGET1(options)(fetch, basePath);
        },
    };
};

/**
 * OperatorCtrlApi - object-oriented interface
 * @export
 * @class OperatorCtrlApi
 * @extends {BaseAPI}
 */
export class OperatorCtrlApi extends BaseAPI {
    /**
     * 
     * @summary GROUP_OPERATOR api endpoint info
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OperatorCtrlApi
     */
    public infoUsingGET1(options?: any) {
        return OperatorCtrlApiFp(this.configuration).infoUsingGET1(options)(this.fetch, this.basePath);
    }

}

/**
 * XAuthorityEntityApi - fetch parameter creator
 * @export
 */
export const XAuthorityEntityApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary deleteXAuthority
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteXAuthorityUsingDELETE(id: number, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling deleteXAuthorityUsingDELETE.');
            }
            const localVarPath = `/api/data/xAuthorities/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary findAllXAuthority
         * @param {string} [page] page
         * @param {string} [size] size
         * @param {string} [sort] sort
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findAllXAuthorityUsingGET(page?: string, size?: string, sort?: string, options: any = {}): FetchArgs {
            const localVarPath = `/api/data/xAuthorities`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary findByIdXAuthority
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findByIdXAuthorityUsingGET(id: number, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling findByIdXAuthorityUsingGET.');
            }
            const localVarPath = `/api/data/xAuthorities/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary saveXAuthority
         * @param {XAuthority} body body
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saveXAuthorityUsingPATCH(body: XAuthority, id: number, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling saveXAuthorityUsingPATCH.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling saveXAuthorityUsingPATCH.');
            }
            const localVarPath = `/api/data/xAuthorities/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PATCH' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"XAuthority" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary saveXAuthority
         * @param {XAuthority} body body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saveXAuthorityUsingPOST(body: XAuthority, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling saveXAuthorityUsingPOST.');
            }
            const localVarPath = `/api/data/xAuthorities`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"XAuthority" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary saveXAuthority
         * @param {XAuthority} body body
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saveXAuthorityUsingPUT(body: XAuthority, id: number, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling saveXAuthorityUsingPUT.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling saveXAuthorityUsingPUT.');
            }
            const localVarPath = `/api/data/xAuthorities/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"XAuthority" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary xAuthorityUser
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        xAuthorityUserUsingDELETE(id: number, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling xAuthorityUserUsingDELETE.');
            }
            const localVarPath = `/api/data/xAuthorities/{id}/user`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary xAuthorityUser
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        xAuthorityUserUsingGET(id: number, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling xAuthorityUserUsingGET.');
            }
            const localVarPath = `/api/data/xAuthorities/{id}/user`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary xAuthorityUser
         * @param {string} body body
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        xAuthorityUserUsingPATCH(body: string, id: number, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling xAuthorityUserUsingPATCH.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling xAuthorityUserUsingPATCH.');
            }
            const localVarPath = `/api/data/xAuthorities/{id}/user`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PATCH' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'text/uri-list';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"string" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary xAuthorityUser
         * @param {string} body body
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        xAuthorityUserUsingPOST(body: string, id: number, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling xAuthorityUserUsingPOST.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling xAuthorityUserUsingPOST.');
            }
            const localVarPath = `/api/data/xAuthorities/{id}/user`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'text/uri-list';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"string" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary xAuthorityUser
         * @param {string} body body
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        xAuthorityUserUsingPUT(body: string, id: number, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling xAuthorityUserUsingPUT.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling xAuthorityUserUsingPUT.');
            }
            const localVarPath = `/api/data/xAuthorities/{id}/user`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'text/uri-list';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"string" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * XAuthorityEntityApi - functional programming interface
 * @export
 */
export const XAuthorityEntityApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary deleteXAuthority
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteXAuthorityUsingDELETE(id: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = XAuthorityEntityApiFetchParamCreator(configuration).deleteXAuthorityUsingDELETE(id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary findAllXAuthority
         * @param {string} [page] page
         * @param {string} [size] size
         * @param {string} [sort] sort
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findAllXAuthorityUsingGET(page?: string, size?: string, sort?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ResourcesOfXAuthority> {
            const localVarFetchArgs = XAuthorityEntityApiFetchParamCreator(configuration).findAllXAuthorityUsingGET(page, size, sort, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary findByIdXAuthority
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findByIdXAuthorityUsingGET(id: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ResourceOfXAuthority> {
            const localVarFetchArgs = XAuthorityEntityApiFetchParamCreator(configuration).findByIdXAuthorityUsingGET(id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary saveXAuthority
         * @param {XAuthority} body body
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saveXAuthorityUsingPATCH(body: XAuthority, id: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ResourceOfXAuthority> {
            const localVarFetchArgs = XAuthorityEntityApiFetchParamCreator(configuration).saveXAuthorityUsingPATCH(body, id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary saveXAuthority
         * @param {XAuthority} body body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saveXAuthorityUsingPOST(body: XAuthority, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ResourceOfXAuthority> {
            const localVarFetchArgs = XAuthorityEntityApiFetchParamCreator(configuration).saveXAuthorityUsingPOST(body, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary saveXAuthority
         * @param {XAuthority} body body
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saveXAuthorityUsingPUT(body: XAuthority, id: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ResourceOfXAuthority> {
            const localVarFetchArgs = XAuthorityEntityApiFetchParamCreator(configuration).saveXAuthorityUsingPUT(body, id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary xAuthorityUser
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        xAuthorityUserUsingDELETE(id: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = XAuthorityEntityApiFetchParamCreator(configuration).xAuthorityUserUsingDELETE(id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary xAuthorityUser
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        xAuthorityUserUsingGET(id: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ResourceOfXUser> {
            const localVarFetchArgs = XAuthorityEntityApiFetchParamCreator(configuration).xAuthorityUserUsingGET(id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary xAuthorityUser
         * @param {string} body body
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        xAuthorityUserUsingPATCH(body: string, id: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ResourceOfXUser> {
            const localVarFetchArgs = XAuthorityEntityApiFetchParamCreator(configuration).xAuthorityUserUsingPATCH(body, id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary xAuthorityUser
         * @param {string} body body
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        xAuthorityUserUsingPOST(body: string, id: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ResourceOfXUser> {
            const localVarFetchArgs = XAuthorityEntityApiFetchParamCreator(configuration).xAuthorityUserUsingPOST(body, id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary xAuthorityUser
         * @param {string} body body
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        xAuthorityUserUsingPUT(body: string, id: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ResourceOfXUser> {
            const localVarFetchArgs = XAuthorityEntityApiFetchParamCreator(configuration).xAuthorityUserUsingPUT(body, id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * XAuthorityEntityApi - factory interface
 * @export
 */
export const XAuthorityEntityApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @summary deleteXAuthority
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteXAuthorityUsingDELETE(id: number, options?: any) {
            return XAuthorityEntityApiFp(configuration).deleteXAuthorityUsingDELETE(id, options)(fetch, basePath);
        },
        /**
         * 
         * @summary findAllXAuthority
         * @param {string} [page] page
         * @param {string} [size] size
         * @param {string} [sort] sort
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findAllXAuthorityUsingGET(page?: string, size?: string, sort?: string, options?: any) {
            return XAuthorityEntityApiFp(configuration).findAllXAuthorityUsingGET(page, size, sort, options)(fetch, basePath);
        },
        /**
         * 
         * @summary findByIdXAuthority
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findByIdXAuthorityUsingGET(id: number, options?: any) {
            return XAuthorityEntityApiFp(configuration).findByIdXAuthorityUsingGET(id, options)(fetch, basePath);
        },
        /**
         * 
         * @summary saveXAuthority
         * @param {XAuthority} body body
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saveXAuthorityUsingPATCH(body: XAuthority, id: number, options?: any) {
            return XAuthorityEntityApiFp(configuration).saveXAuthorityUsingPATCH(body, id, options)(fetch, basePath);
        },
        /**
         * 
         * @summary saveXAuthority
         * @param {XAuthority} body body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saveXAuthorityUsingPOST(body: XAuthority, options?: any) {
            return XAuthorityEntityApiFp(configuration).saveXAuthorityUsingPOST(body, options)(fetch, basePath);
        },
        /**
         * 
         * @summary saveXAuthority
         * @param {XAuthority} body body
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saveXAuthorityUsingPUT(body: XAuthority, id: number, options?: any) {
            return XAuthorityEntityApiFp(configuration).saveXAuthorityUsingPUT(body, id, options)(fetch, basePath);
        },
        /**
         * 
         * @summary xAuthorityUser
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        xAuthorityUserUsingDELETE(id: number, options?: any) {
            return XAuthorityEntityApiFp(configuration).xAuthorityUserUsingDELETE(id, options)(fetch, basePath);
        },
        /**
         * 
         * @summary xAuthorityUser
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        xAuthorityUserUsingGET(id: number, options?: any) {
            return XAuthorityEntityApiFp(configuration).xAuthorityUserUsingGET(id, options)(fetch, basePath);
        },
        /**
         * 
         * @summary xAuthorityUser
         * @param {string} body body
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        xAuthorityUserUsingPATCH(body: string, id: number, options?: any) {
            return XAuthorityEntityApiFp(configuration).xAuthorityUserUsingPATCH(body, id, options)(fetch, basePath);
        },
        /**
         * 
         * @summary xAuthorityUser
         * @param {string} body body
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        xAuthorityUserUsingPOST(body: string, id: number, options?: any) {
            return XAuthorityEntityApiFp(configuration).xAuthorityUserUsingPOST(body, id, options)(fetch, basePath);
        },
        /**
         * 
         * @summary xAuthorityUser
         * @param {string} body body
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        xAuthorityUserUsingPUT(body: string, id: number, options?: any) {
            return XAuthorityEntityApiFp(configuration).xAuthorityUserUsingPUT(body, id, options)(fetch, basePath);
        },
    };
};

/**
 * XAuthorityEntityApi - object-oriented interface
 * @export
 * @class XAuthorityEntityApi
 * @extends {BaseAPI}
 */
export class XAuthorityEntityApi extends BaseAPI {
    /**
     * 
     * @summary deleteXAuthority
     * @param {number} id id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof XAuthorityEntityApi
     */
    public deleteXAuthorityUsingDELETE(id: number, options?: any) {
        return XAuthorityEntityApiFp(this.configuration).deleteXAuthorityUsingDELETE(id, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary findAllXAuthority
     * @param {string} [page] page
     * @param {string} [size] size
     * @param {string} [sort] sort
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof XAuthorityEntityApi
     */
    public findAllXAuthorityUsingGET(page?: string, size?: string, sort?: string, options?: any) {
        return XAuthorityEntityApiFp(this.configuration).findAllXAuthorityUsingGET(page, size, sort, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary findByIdXAuthority
     * @param {number} id id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof XAuthorityEntityApi
     */
    public findByIdXAuthorityUsingGET(id: number, options?: any) {
        return XAuthorityEntityApiFp(this.configuration).findByIdXAuthorityUsingGET(id, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary saveXAuthority
     * @param {XAuthority} body body
     * @param {number} id id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof XAuthorityEntityApi
     */
    public saveXAuthorityUsingPATCH(body: XAuthority, id: number, options?: any) {
        return XAuthorityEntityApiFp(this.configuration).saveXAuthorityUsingPATCH(body, id, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary saveXAuthority
     * @param {XAuthority} body body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof XAuthorityEntityApi
     */
    public saveXAuthorityUsingPOST(body: XAuthority, options?: any) {
        return XAuthorityEntityApiFp(this.configuration).saveXAuthorityUsingPOST(body, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary saveXAuthority
     * @param {XAuthority} body body
     * @param {number} id id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof XAuthorityEntityApi
     */
    public saveXAuthorityUsingPUT(body: XAuthority, id: number, options?: any) {
        return XAuthorityEntityApiFp(this.configuration).saveXAuthorityUsingPUT(body, id, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary xAuthorityUser
     * @param {number} id id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof XAuthorityEntityApi
     */
    public xAuthorityUserUsingDELETE(id: number, options?: any) {
        return XAuthorityEntityApiFp(this.configuration).xAuthorityUserUsingDELETE(id, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary xAuthorityUser
     * @param {number} id id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof XAuthorityEntityApi
     */
    public xAuthorityUserUsingGET(id: number, options?: any) {
        return XAuthorityEntityApiFp(this.configuration).xAuthorityUserUsingGET(id, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary xAuthorityUser
     * @param {string} body body
     * @param {number} id id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof XAuthorityEntityApi
     */
    public xAuthorityUserUsingPATCH(body: string, id: number, options?: any) {
        return XAuthorityEntityApiFp(this.configuration).xAuthorityUserUsingPATCH(body, id, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary xAuthorityUser
     * @param {string} body body
     * @param {number} id id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof XAuthorityEntityApi
     */
    public xAuthorityUserUsingPOST(body: string, id: number, options?: any) {
        return XAuthorityEntityApiFp(this.configuration).xAuthorityUserUsingPOST(body, id, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary xAuthorityUser
     * @param {string} body body
     * @param {number} id id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof XAuthorityEntityApi
     */
    public xAuthorityUserUsingPUT(body: string, id: number, options?: any) {
        return XAuthorityEntityApiFp(this.configuration).xAuthorityUserUsingPUT(body, id, options)(this.fetch, this.basePath);
    }

}

/**
 * XGroupAuthorityEntityApi - fetch parameter creator
 * @export
 */
export const XGroupAuthorityEntityApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary deleteXGroupAuthority
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteXGroupAuthorityUsingDELETE(id: number, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling deleteXGroupAuthorityUsingDELETE.');
            }
            const localVarPath = `/api/data/xGroupAuthorities/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary findAllXGroupAuthority
         * @param {string} [page] page
         * @param {string} [size] size
         * @param {string} [sort] sort
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findAllXGroupAuthorityUsingGET(page?: string, size?: string, sort?: string, options: any = {}): FetchArgs {
            const localVarPath = `/api/data/xGroupAuthorities`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary findByIdXGroupAuthority
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findByIdXGroupAuthorityUsingGET(id: number, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling findByIdXGroupAuthorityUsingGET.');
            }
            const localVarPath = `/api/data/xGroupAuthorities/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary saveXGroupAuthority
         * @param {XGroupAuthority} body body
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saveXGroupAuthorityUsingPATCH(body: XGroupAuthority, id: number, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling saveXGroupAuthorityUsingPATCH.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling saveXGroupAuthorityUsingPATCH.');
            }
            const localVarPath = `/api/data/xGroupAuthorities/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PATCH' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"XGroupAuthority" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary saveXGroupAuthority
         * @param {XGroupAuthority} body body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saveXGroupAuthorityUsingPOST(body: XGroupAuthority, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling saveXGroupAuthorityUsingPOST.');
            }
            const localVarPath = `/api/data/xGroupAuthorities`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"XGroupAuthority" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary saveXGroupAuthority
         * @param {XGroupAuthority} body body
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saveXGroupAuthorityUsingPUT(body: XGroupAuthority, id: number, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling saveXGroupAuthorityUsingPUT.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling saveXGroupAuthorityUsingPUT.');
            }
            const localVarPath = `/api/data/xGroupAuthorities/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"XGroupAuthority" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary xGroupAuthorityGroup
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        xGroupAuthorityGroupUsingDELETE(id: number, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling xGroupAuthorityGroupUsingDELETE.');
            }
            const localVarPath = `/api/data/xGroupAuthorities/{id}/group`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary xGroupAuthorityGroup
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        xGroupAuthorityGroupUsingGET(id: number, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling xGroupAuthorityGroupUsingGET.');
            }
            const localVarPath = `/api/data/xGroupAuthorities/{id}/group`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary xGroupAuthorityGroup
         * @param {string} body body
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        xGroupAuthorityGroupUsingPATCH(body: string, id: number, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling xGroupAuthorityGroupUsingPATCH.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling xGroupAuthorityGroupUsingPATCH.');
            }
            const localVarPath = `/api/data/xGroupAuthorities/{id}/group`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PATCH' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'text/uri-list';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"string" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary xGroupAuthorityGroup
         * @param {string} body body
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        xGroupAuthorityGroupUsingPOST(body: string, id: number, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling xGroupAuthorityGroupUsingPOST.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling xGroupAuthorityGroupUsingPOST.');
            }
            const localVarPath = `/api/data/xGroupAuthorities/{id}/group`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'text/uri-list';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"string" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary xGroupAuthorityGroup
         * @param {string} body body
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        xGroupAuthorityGroupUsingPUT(body: string, id: number, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling xGroupAuthorityGroupUsingPUT.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling xGroupAuthorityGroupUsingPUT.');
            }
            const localVarPath = `/api/data/xGroupAuthorities/{id}/group`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'text/uri-list';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"string" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * XGroupAuthorityEntityApi - functional programming interface
 * @export
 */
export const XGroupAuthorityEntityApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary deleteXGroupAuthority
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteXGroupAuthorityUsingDELETE(id: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = XGroupAuthorityEntityApiFetchParamCreator(configuration).deleteXGroupAuthorityUsingDELETE(id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary findAllXGroupAuthority
         * @param {string} [page] page
         * @param {string} [size] size
         * @param {string} [sort] sort
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findAllXGroupAuthorityUsingGET(page?: string, size?: string, sort?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ResourcesOfXGroupAuthority> {
            const localVarFetchArgs = XGroupAuthorityEntityApiFetchParamCreator(configuration).findAllXGroupAuthorityUsingGET(page, size, sort, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary findByIdXGroupAuthority
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findByIdXGroupAuthorityUsingGET(id: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ResourceOfXGroupAuthority> {
            const localVarFetchArgs = XGroupAuthorityEntityApiFetchParamCreator(configuration).findByIdXGroupAuthorityUsingGET(id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary saveXGroupAuthority
         * @param {XGroupAuthority} body body
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saveXGroupAuthorityUsingPATCH(body: XGroupAuthority, id: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ResourceOfXGroupAuthority> {
            const localVarFetchArgs = XGroupAuthorityEntityApiFetchParamCreator(configuration).saveXGroupAuthorityUsingPATCH(body, id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary saveXGroupAuthority
         * @param {XGroupAuthority} body body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saveXGroupAuthorityUsingPOST(body: XGroupAuthority, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ResourceOfXGroupAuthority> {
            const localVarFetchArgs = XGroupAuthorityEntityApiFetchParamCreator(configuration).saveXGroupAuthorityUsingPOST(body, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary saveXGroupAuthority
         * @param {XGroupAuthority} body body
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saveXGroupAuthorityUsingPUT(body: XGroupAuthority, id: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ResourceOfXGroupAuthority> {
            const localVarFetchArgs = XGroupAuthorityEntityApiFetchParamCreator(configuration).saveXGroupAuthorityUsingPUT(body, id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary xGroupAuthorityGroup
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        xGroupAuthorityGroupUsingDELETE(id: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = XGroupAuthorityEntityApiFetchParamCreator(configuration).xGroupAuthorityGroupUsingDELETE(id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary xGroupAuthorityGroup
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        xGroupAuthorityGroupUsingGET(id: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ResourceOfXGroup> {
            const localVarFetchArgs = XGroupAuthorityEntityApiFetchParamCreator(configuration).xGroupAuthorityGroupUsingGET(id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary xGroupAuthorityGroup
         * @param {string} body body
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        xGroupAuthorityGroupUsingPATCH(body: string, id: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ResourceOfXGroup> {
            const localVarFetchArgs = XGroupAuthorityEntityApiFetchParamCreator(configuration).xGroupAuthorityGroupUsingPATCH(body, id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary xGroupAuthorityGroup
         * @param {string} body body
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        xGroupAuthorityGroupUsingPOST(body: string, id: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ResourceOfXGroup> {
            const localVarFetchArgs = XGroupAuthorityEntityApiFetchParamCreator(configuration).xGroupAuthorityGroupUsingPOST(body, id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary xGroupAuthorityGroup
         * @param {string} body body
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        xGroupAuthorityGroupUsingPUT(body: string, id: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ResourceOfXGroup> {
            const localVarFetchArgs = XGroupAuthorityEntityApiFetchParamCreator(configuration).xGroupAuthorityGroupUsingPUT(body, id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * XGroupAuthorityEntityApi - factory interface
 * @export
 */
export const XGroupAuthorityEntityApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @summary deleteXGroupAuthority
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteXGroupAuthorityUsingDELETE(id: number, options?: any) {
            return XGroupAuthorityEntityApiFp(configuration).deleteXGroupAuthorityUsingDELETE(id, options)(fetch, basePath);
        },
        /**
         * 
         * @summary findAllXGroupAuthority
         * @param {string} [page] page
         * @param {string} [size] size
         * @param {string} [sort] sort
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findAllXGroupAuthorityUsingGET(page?: string, size?: string, sort?: string, options?: any) {
            return XGroupAuthorityEntityApiFp(configuration).findAllXGroupAuthorityUsingGET(page, size, sort, options)(fetch, basePath);
        },
        /**
         * 
         * @summary findByIdXGroupAuthority
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findByIdXGroupAuthorityUsingGET(id: number, options?: any) {
            return XGroupAuthorityEntityApiFp(configuration).findByIdXGroupAuthorityUsingGET(id, options)(fetch, basePath);
        },
        /**
         * 
         * @summary saveXGroupAuthority
         * @param {XGroupAuthority} body body
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saveXGroupAuthorityUsingPATCH(body: XGroupAuthority, id: number, options?: any) {
            return XGroupAuthorityEntityApiFp(configuration).saveXGroupAuthorityUsingPATCH(body, id, options)(fetch, basePath);
        },
        /**
         * 
         * @summary saveXGroupAuthority
         * @param {XGroupAuthority} body body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saveXGroupAuthorityUsingPOST(body: XGroupAuthority, options?: any) {
            return XGroupAuthorityEntityApiFp(configuration).saveXGroupAuthorityUsingPOST(body, options)(fetch, basePath);
        },
        /**
         * 
         * @summary saveXGroupAuthority
         * @param {XGroupAuthority} body body
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saveXGroupAuthorityUsingPUT(body: XGroupAuthority, id: number, options?: any) {
            return XGroupAuthorityEntityApiFp(configuration).saveXGroupAuthorityUsingPUT(body, id, options)(fetch, basePath);
        },
        /**
         * 
         * @summary xGroupAuthorityGroup
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        xGroupAuthorityGroupUsingDELETE(id: number, options?: any) {
            return XGroupAuthorityEntityApiFp(configuration).xGroupAuthorityGroupUsingDELETE(id, options)(fetch, basePath);
        },
        /**
         * 
         * @summary xGroupAuthorityGroup
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        xGroupAuthorityGroupUsingGET(id: number, options?: any) {
            return XGroupAuthorityEntityApiFp(configuration).xGroupAuthorityGroupUsingGET(id, options)(fetch, basePath);
        },
        /**
         * 
         * @summary xGroupAuthorityGroup
         * @param {string} body body
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        xGroupAuthorityGroupUsingPATCH(body: string, id: number, options?: any) {
            return XGroupAuthorityEntityApiFp(configuration).xGroupAuthorityGroupUsingPATCH(body, id, options)(fetch, basePath);
        },
        /**
         * 
         * @summary xGroupAuthorityGroup
         * @param {string} body body
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        xGroupAuthorityGroupUsingPOST(body: string, id: number, options?: any) {
            return XGroupAuthorityEntityApiFp(configuration).xGroupAuthorityGroupUsingPOST(body, id, options)(fetch, basePath);
        },
        /**
         * 
         * @summary xGroupAuthorityGroup
         * @param {string} body body
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        xGroupAuthorityGroupUsingPUT(body: string, id: number, options?: any) {
            return XGroupAuthorityEntityApiFp(configuration).xGroupAuthorityGroupUsingPUT(body, id, options)(fetch, basePath);
        },
    };
};

/**
 * XGroupAuthorityEntityApi - object-oriented interface
 * @export
 * @class XGroupAuthorityEntityApi
 * @extends {BaseAPI}
 */
export class XGroupAuthorityEntityApi extends BaseAPI {
    /**
     * 
     * @summary deleteXGroupAuthority
     * @param {number} id id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof XGroupAuthorityEntityApi
     */
    public deleteXGroupAuthorityUsingDELETE(id: number, options?: any) {
        return XGroupAuthorityEntityApiFp(this.configuration).deleteXGroupAuthorityUsingDELETE(id, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary findAllXGroupAuthority
     * @param {string} [page] page
     * @param {string} [size] size
     * @param {string} [sort] sort
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof XGroupAuthorityEntityApi
     */
    public findAllXGroupAuthorityUsingGET(page?: string, size?: string, sort?: string, options?: any) {
        return XGroupAuthorityEntityApiFp(this.configuration).findAllXGroupAuthorityUsingGET(page, size, sort, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary findByIdXGroupAuthority
     * @param {number} id id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof XGroupAuthorityEntityApi
     */
    public findByIdXGroupAuthorityUsingGET(id: number, options?: any) {
        return XGroupAuthorityEntityApiFp(this.configuration).findByIdXGroupAuthorityUsingGET(id, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary saveXGroupAuthority
     * @param {XGroupAuthority} body body
     * @param {number} id id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof XGroupAuthorityEntityApi
     */
    public saveXGroupAuthorityUsingPATCH(body: XGroupAuthority, id: number, options?: any) {
        return XGroupAuthorityEntityApiFp(this.configuration).saveXGroupAuthorityUsingPATCH(body, id, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary saveXGroupAuthority
     * @param {XGroupAuthority} body body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof XGroupAuthorityEntityApi
     */
    public saveXGroupAuthorityUsingPOST(body: XGroupAuthority, options?: any) {
        return XGroupAuthorityEntityApiFp(this.configuration).saveXGroupAuthorityUsingPOST(body, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary saveXGroupAuthority
     * @param {XGroupAuthority} body body
     * @param {number} id id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof XGroupAuthorityEntityApi
     */
    public saveXGroupAuthorityUsingPUT(body: XGroupAuthority, id: number, options?: any) {
        return XGroupAuthorityEntityApiFp(this.configuration).saveXGroupAuthorityUsingPUT(body, id, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary xGroupAuthorityGroup
     * @param {number} id id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof XGroupAuthorityEntityApi
     */
    public xGroupAuthorityGroupUsingDELETE(id: number, options?: any) {
        return XGroupAuthorityEntityApiFp(this.configuration).xGroupAuthorityGroupUsingDELETE(id, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary xGroupAuthorityGroup
     * @param {number} id id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof XGroupAuthorityEntityApi
     */
    public xGroupAuthorityGroupUsingGET(id: number, options?: any) {
        return XGroupAuthorityEntityApiFp(this.configuration).xGroupAuthorityGroupUsingGET(id, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary xGroupAuthorityGroup
     * @param {string} body body
     * @param {number} id id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof XGroupAuthorityEntityApi
     */
    public xGroupAuthorityGroupUsingPATCH(body: string, id: number, options?: any) {
        return XGroupAuthorityEntityApiFp(this.configuration).xGroupAuthorityGroupUsingPATCH(body, id, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary xGroupAuthorityGroup
     * @param {string} body body
     * @param {number} id id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof XGroupAuthorityEntityApi
     */
    public xGroupAuthorityGroupUsingPOST(body: string, id: number, options?: any) {
        return XGroupAuthorityEntityApiFp(this.configuration).xGroupAuthorityGroupUsingPOST(body, id, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary xGroupAuthorityGroup
     * @param {string} body body
     * @param {number} id id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof XGroupAuthorityEntityApi
     */
    public xGroupAuthorityGroupUsingPUT(body: string, id: number, options?: any) {
        return XGroupAuthorityEntityApiFp(this.configuration).xGroupAuthorityGroupUsingPUT(body, id, options)(this.fetch, this.basePath);
    }

}

/**
 * XGroupEntityApi - fetch parameter creator
 * @export
 */
export const XGroupEntityApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary deleteXGroup
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteXGroupUsingDELETE(id: number, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling deleteXGroupUsingDELETE.');
            }
            const localVarPath = `/api/data/xGroups/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary findAllXGroup
         * @param {string} [page] page
         * @param {string} [size] size
         * @param {string} [sort] sort
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findAllXGroupUsingGET(page?: string, size?: string, sort?: string, options: any = {}): FetchArgs {
            const localVarPath = `/api/data/xGroups`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary findByIdXGroup
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findByIdXGroupUsingGET(id: number, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling findByIdXGroupUsingGET.');
            }
            const localVarPath = `/api/data/xGroups/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary find one group by its name
         * @param {string} groupName group_name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findByNameXGroupUsingGET(groupName: string, options: any = {}): FetchArgs {
            // verify required parameter 'groupName' is not null or undefined
            if (groupName === null || groupName === undefined) {
                throw new RequiredError('groupName','Required parameter groupName was null or undefined when calling findByNameXGroupUsingGET.');
            }
            const localVarPath = `/api/data/xGroups/search/findByName`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (groupName !== undefined) {
                localVarQueryParameter['group_name'] = groupName;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary saveXGroup
         * @param {XGroup} body body
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saveXGroupUsingPATCH(body: XGroup, id: number, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling saveXGroupUsingPATCH.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling saveXGroupUsingPATCH.');
            }
            const localVarPath = `/api/data/xGroups/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PATCH' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"XGroup" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary saveXGroup
         * @param {XGroup} body body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saveXGroupUsingPOST(body: XGroup, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling saveXGroupUsingPOST.');
            }
            const localVarPath = `/api/data/xGroups`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"XGroup" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary saveXGroup
         * @param {XGroup} body body
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saveXGroupUsingPUT(body: XGroup, id: number, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling saveXGroupUsingPUT.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling saveXGroupUsingPUT.');
            }
            const localVarPath = `/api/data/xGroups/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"XGroup" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * XGroupEntityApi - functional programming interface
 * @export
 */
export const XGroupEntityApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary deleteXGroup
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteXGroupUsingDELETE(id: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = XGroupEntityApiFetchParamCreator(configuration).deleteXGroupUsingDELETE(id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary findAllXGroup
         * @param {string} [page] page
         * @param {string} [size] size
         * @param {string} [sort] sort
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findAllXGroupUsingGET(page?: string, size?: string, sort?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ResourcesOfXGroup> {
            const localVarFetchArgs = XGroupEntityApiFetchParamCreator(configuration).findAllXGroupUsingGET(page, size, sort, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary findByIdXGroup
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findByIdXGroupUsingGET(id: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ResourceOfXGroup> {
            const localVarFetchArgs = XGroupEntityApiFetchParamCreator(configuration).findByIdXGroupUsingGET(id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary find one group by its name
         * @param {string} groupName group_name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findByNameXGroupUsingGET(groupName: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ResourceOfXGroup> {
            const localVarFetchArgs = XGroupEntityApiFetchParamCreator(configuration).findByNameXGroupUsingGET(groupName, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary saveXGroup
         * @param {XGroup} body body
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saveXGroupUsingPATCH(body: XGroup, id: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ResourceOfXGroup> {
            const localVarFetchArgs = XGroupEntityApiFetchParamCreator(configuration).saveXGroupUsingPATCH(body, id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary saveXGroup
         * @param {XGroup} body body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saveXGroupUsingPOST(body: XGroup, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ResourceOfXGroup> {
            const localVarFetchArgs = XGroupEntityApiFetchParamCreator(configuration).saveXGroupUsingPOST(body, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary saveXGroup
         * @param {XGroup} body body
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saveXGroupUsingPUT(body: XGroup, id: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ResourceOfXGroup> {
            const localVarFetchArgs = XGroupEntityApiFetchParamCreator(configuration).saveXGroupUsingPUT(body, id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * XGroupEntityApi - factory interface
 * @export
 */
export const XGroupEntityApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @summary deleteXGroup
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteXGroupUsingDELETE(id: number, options?: any) {
            return XGroupEntityApiFp(configuration).deleteXGroupUsingDELETE(id, options)(fetch, basePath);
        },
        /**
         * 
         * @summary findAllXGroup
         * @param {string} [page] page
         * @param {string} [size] size
         * @param {string} [sort] sort
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findAllXGroupUsingGET(page?: string, size?: string, sort?: string, options?: any) {
            return XGroupEntityApiFp(configuration).findAllXGroupUsingGET(page, size, sort, options)(fetch, basePath);
        },
        /**
         * 
         * @summary findByIdXGroup
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findByIdXGroupUsingGET(id: number, options?: any) {
            return XGroupEntityApiFp(configuration).findByIdXGroupUsingGET(id, options)(fetch, basePath);
        },
        /**
         * 
         * @summary find one group by its name
         * @param {string} groupName group_name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findByNameXGroupUsingGET(groupName: string, options?: any) {
            return XGroupEntityApiFp(configuration).findByNameXGroupUsingGET(groupName, options)(fetch, basePath);
        },
        /**
         * 
         * @summary saveXGroup
         * @param {XGroup} body body
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saveXGroupUsingPATCH(body: XGroup, id: number, options?: any) {
            return XGroupEntityApiFp(configuration).saveXGroupUsingPATCH(body, id, options)(fetch, basePath);
        },
        /**
         * 
         * @summary saveXGroup
         * @param {XGroup} body body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saveXGroupUsingPOST(body: XGroup, options?: any) {
            return XGroupEntityApiFp(configuration).saveXGroupUsingPOST(body, options)(fetch, basePath);
        },
        /**
         * 
         * @summary saveXGroup
         * @param {XGroup} body body
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saveXGroupUsingPUT(body: XGroup, id: number, options?: any) {
            return XGroupEntityApiFp(configuration).saveXGroupUsingPUT(body, id, options)(fetch, basePath);
        },
    };
};

/**
 * XGroupEntityApi - object-oriented interface
 * @export
 * @class XGroupEntityApi
 * @extends {BaseAPI}
 */
export class XGroupEntityApi extends BaseAPI {
    /**
     * 
     * @summary deleteXGroup
     * @param {number} id id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof XGroupEntityApi
     */
    public deleteXGroupUsingDELETE(id: number, options?: any) {
        return XGroupEntityApiFp(this.configuration).deleteXGroupUsingDELETE(id, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary findAllXGroup
     * @param {string} [page] page
     * @param {string} [size] size
     * @param {string} [sort] sort
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof XGroupEntityApi
     */
    public findAllXGroupUsingGET(page?: string, size?: string, sort?: string, options?: any) {
        return XGroupEntityApiFp(this.configuration).findAllXGroupUsingGET(page, size, sort, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary findByIdXGroup
     * @param {number} id id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof XGroupEntityApi
     */
    public findByIdXGroupUsingGET(id: number, options?: any) {
        return XGroupEntityApiFp(this.configuration).findByIdXGroupUsingGET(id, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary find one group by its name
     * @param {string} groupName group_name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof XGroupEntityApi
     */
    public findByNameXGroupUsingGET(groupName: string, options?: any) {
        return XGroupEntityApiFp(this.configuration).findByNameXGroupUsingGET(groupName, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary saveXGroup
     * @param {XGroup} body body
     * @param {number} id id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof XGroupEntityApi
     */
    public saveXGroupUsingPATCH(body: XGroup, id: number, options?: any) {
        return XGroupEntityApiFp(this.configuration).saveXGroupUsingPATCH(body, id, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary saveXGroup
     * @param {XGroup} body body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof XGroupEntityApi
     */
    public saveXGroupUsingPOST(body: XGroup, options?: any) {
        return XGroupEntityApiFp(this.configuration).saveXGroupUsingPOST(body, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary saveXGroup
     * @param {XGroup} body body
     * @param {number} id id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof XGroupEntityApi
     */
    public saveXGroupUsingPUT(body: XGroup, id: number, options?: any) {
        return XGroupEntityApiFp(this.configuration).saveXGroupUsingPUT(body, id, options)(this.fetch, this.basePath);
    }

}

/**
 * XGroupMemberEntityApi - fetch parameter creator
 * @export
 */
export const XGroupMemberEntityApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary deleteXGroupMember
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteXGroupMemberUsingDELETE(id: number, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling deleteXGroupMemberUsingDELETE.');
            }
            const localVarPath = `/api/data/dr-group-member/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary findAllXGroupMember
         * @param {string} [page] page
         * @param {string} [size] size
         * @param {string} [sort] sort
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findAllXGroupMemberUsingGET(page?: string, size?: string, sort?: string, options: any = {}): FetchArgs {
            const localVarPath = `/api/data/dr-group-member`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary findByIdXGroupMember
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findByIdXGroupMemberUsingGET(id: number, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling findByIdXGroupMemberUsingGET.');
            }
            const localVarPath = `/api/data/dr-group-member/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary saveXGroupMember
         * @param {XGroupMember} body body
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saveXGroupMemberUsingPATCH(body: XGroupMember, id: number, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling saveXGroupMemberUsingPATCH.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling saveXGroupMemberUsingPATCH.');
            }
            const localVarPath = `/api/data/dr-group-member/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PATCH' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"XGroupMember" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary saveXGroupMember
         * @param {XGroupMember} body body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saveXGroupMemberUsingPOST(body: XGroupMember, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling saveXGroupMemberUsingPOST.');
            }
            const localVarPath = `/api/data/dr-group-member`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"XGroupMember" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary saveXGroupMember
         * @param {XGroupMember} body body
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saveXGroupMemberUsingPUT(body: XGroupMember, id: number, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling saveXGroupMemberUsingPUT.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling saveXGroupMemberUsingPUT.');
            }
            const localVarPath = `/api/data/dr-group-member/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"XGroupMember" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary xGroupMemberGroup
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        xGroupMemberGroupUsingDELETE(id: number, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling xGroupMemberGroupUsingDELETE.');
            }
            const localVarPath = `/api/data/dr-group-member/{id}/group`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary xGroupMemberGroup
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        xGroupMemberGroupUsingGET(id: number, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling xGroupMemberGroupUsingGET.');
            }
            const localVarPath = `/api/data/dr-group-member/{id}/group`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary xGroupMemberGroup
         * @param {string} body body
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        xGroupMemberGroupUsingPATCH(body: string, id: number, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling xGroupMemberGroupUsingPATCH.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling xGroupMemberGroupUsingPATCH.');
            }
            const localVarPath = `/api/data/dr-group-member/{id}/group`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PATCH' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'text/uri-list';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"string" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary xGroupMemberGroup
         * @param {string} body body
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        xGroupMemberGroupUsingPOST(body: string, id: number, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling xGroupMemberGroupUsingPOST.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling xGroupMemberGroupUsingPOST.');
            }
            const localVarPath = `/api/data/dr-group-member/{id}/group`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'text/uri-list';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"string" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary xGroupMemberGroup
         * @param {string} body body
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        xGroupMemberGroupUsingPUT(body: string, id: number, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling xGroupMemberGroupUsingPUT.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling xGroupMemberGroupUsingPUT.');
            }
            const localVarPath = `/api/data/dr-group-member/{id}/group`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'text/uri-list';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"string" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * XGroupMemberEntityApi - functional programming interface
 * @export
 */
export const XGroupMemberEntityApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary deleteXGroupMember
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteXGroupMemberUsingDELETE(id: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = XGroupMemberEntityApiFetchParamCreator(configuration).deleteXGroupMemberUsingDELETE(id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary findAllXGroupMember
         * @param {string} [page] page
         * @param {string} [size] size
         * @param {string} [sort] sort
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findAllXGroupMemberUsingGET(page?: string, size?: string, sort?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ResourcesOfXGroupMember> {
            const localVarFetchArgs = XGroupMemberEntityApiFetchParamCreator(configuration).findAllXGroupMemberUsingGET(page, size, sort, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary findByIdXGroupMember
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findByIdXGroupMemberUsingGET(id: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ResourceOfXGroupMember> {
            const localVarFetchArgs = XGroupMemberEntityApiFetchParamCreator(configuration).findByIdXGroupMemberUsingGET(id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary saveXGroupMember
         * @param {XGroupMember} body body
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saveXGroupMemberUsingPATCH(body: XGroupMember, id: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ResourceOfXGroupMember> {
            const localVarFetchArgs = XGroupMemberEntityApiFetchParamCreator(configuration).saveXGroupMemberUsingPATCH(body, id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary saveXGroupMember
         * @param {XGroupMember} body body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saveXGroupMemberUsingPOST(body: XGroupMember, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ResourceOfXGroupMember> {
            const localVarFetchArgs = XGroupMemberEntityApiFetchParamCreator(configuration).saveXGroupMemberUsingPOST(body, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary saveXGroupMember
         * @param {XGroupMember} body body
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saveXGroupMemberUsingPUT(body: XGroupMember, id: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ResourceOfXGroupMember> {
            const localVarFetchArgs = XGroupMemberEntityApiFetchParamCreator(configuration).saveXGroupMemberUsingPUT(body, id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary xGroupMemberGroup
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        xGroupMemberGroupUsingDELETE(id: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = XGroupMemberEntityApiFetchParamCreator(configuration).xGroupMemberGroupUsingDELETE(id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary xGroupMemberGroup
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        xGroupMemberGroupUsingGET(id: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ResourceOfXGroup> {
            const localVarFetchArgs = XGroupMemberEntityApiFetchParamCreator(configuration).xGroupMemberGroupUsingGET(id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary xGroupMemberGroup
         * @param {string} body body
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        xGroupMemberGroupUsingPATCH(body: string, id: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ResourceOfXGroup> {
            const localVarFetchArgs = XGroupMemberEntityApiFetchParamCreator(configuration).xGroupMemberGroupUsingPATCH(body, id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary xGroupMemberGroup
         * @param {string} body body
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        xGroupMemberGroupUsingPOST(body: string, id: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ResourceOfXGroup> {
            const localVarFetchArgs = XGroupMemberEntityApiFetchParamCreator(configuration).xGroupMemberGroupUsingPOST(body, id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary xGroupMemberGroup
         * @param {string} body body
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        xGroupMemberGroupUsingPUT(body: string, id: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ResourceOfXGroup> {
            const localVarFetchArgs = XGroupMemberEntityApiFetchParamCreator(configuration).xGroupMemberGroupUsingPUT(body, id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * XGroupMemberEntityApi - factory interface
 * @export
 */
export const XGroupMemberEntityApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @summary deleteXGroupMember
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteXGroupMemberUsingDELETE(id: number, options?: any) {
            return XGroupMemberEntityApiFp(configuration).deleteXGroupMemberUsingDELETE(id, options)(fetch, basePath);
        },
        /**
         * 
         * @summary findAllXGroupMember
         * @param {string} [page] page
         * @param {string} [size] size
         * @param {string} [sort] sort
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findAllXGroupMemberUsingGET(page?: string, size?: string, sort?: string, options?: any) {
            return XGroupMemberEntityApiFp(configuration).findAllXGroupMemberUsingGET(page, size, sort, options)(fetch, basePath);
        },
        /**
         * 
         * @summary findByIdXGroupMember
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findByIdXGroupMemberUsingGET(id: number, options?: any) {
            return XGroupMemberEntityApiFp(configuration).findByIdXGroupMemberUsingGET(id, options)(fetch, basePath);
        },
        /**
         * 
         * @summary saveXGroupMember
         * @param {XGroupMember} body body
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saveXGroupMemberUsingPATCH(body: XGroupMember, id: number, options?: any) {
            return XGroupMemberEntityApiFp(configuration).saveXGroupMemberUsingPATCH(body, id, options)(fetch, basePath);
        },
        /**
         * 
         * @summary saveXGroupMember
         * @param {XGroupMember} body body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saveXGroupMemberUsingPOST(body: XGroupMember, options?: any) {
            return XGroupMemberEntityApiFp(configuration).saveXGroupMemberUsingPOST(body, options)(fetch, basePath);
        },
        /**
         * 
         * @summary saveXGroupMember
         * @param {XGroupMember} body body
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saveXGroupMemberUsingPUT(body: XGroupMember, id: number, options?: any) {
            return XGroupMemberEntityApiFp(configuration).saveXGroupMemberUsingPUT(body, id, options)(fetch, basePath);
        },
        /**
         * 
         * @summary xGroupMemberGroup
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        xGroupMemberGroupUsingDELETE(id: number, options?: any) {
            return XGroupMemberEntityApiFp(configuration).xGroupMemberGroupUsingDELETE(id, options)(fetch, basePath);
        },
        /**
         * 
         * @summary xGroupMemberGroup
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        xGroupMemberGroupUsingGET(id: number, options?: any) {
            return XGroupMemberEntityApiFp(configuration).xGroupMemberGroupUsingGET(id, options)(fetch, basePath);
        },
        /**
         * 
         * @summary xGroupMemberGroup
         * @param {string} body body
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        xGroupMemberGroupUsingPATCH(body: string, id: number, options?: any) {
            return XGroupMemberEntityApiFp(configuration).xGroupMemberGroupUsingPATCH(body, id, options)(fetch, basePath);
        },
        /**
         * 
         * @summary xGroupMemberGroup
         * @param {string} body body
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        xGroupMemberGroupUsingPOST(body: string, id: number, options?: any) {
            return XGroupMemberEntityApiFp(configuration).xGroupMemberGroupUsingPOST(body, id, options)(fetch, basePath);
        },
        /**
         * 
         * @summary xGroupMemberGroup
         * @param {string} body body
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        xGroupMemberGroupUsingPUT(body: string, id: number, options?: any) {
            return XGroupMemberEntityApiFp(configuration).xGroupMemberGroupUsingPUT(body, id, options)(fetch, basePath);
        },
    };
};

/**
 * XGroupMemberEntityApi - object-oriented interface
 * @export
 * @class XGroupMemberEntityApi
 * @extends {BaseAPI}
 */
export class XGroupMemberEntityApi extends BaseAPI {
    /**
     * 
     * @summary deleteXGroupMember
     * @param {number} id id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof XGroupMemberEntityApi
     */
    public deleteXGroupMemberUsingDELETE(id: number, options?: any) {
        return XGroupMemberEntityApiFp(this.configuration).deleteXGroupMemberUsingDELETE(id, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary findAllXGroupMember
     * @param {string} [page] page
     * @param {string} [size] size
     * @param {string} [sort] sort
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof XGroupMemberEntityApi
     */
    public findAllXGroupMemberUsingGET(page?: string, size?: string, sort?: string, options?: any) {
        return XGroupMemberEntityApiFp(this.configuration).findAllXGroupMemberUsingGET(page, size, sort, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary findByIdXGroupMember
     * @param {number} id id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof XGroupMemberEntityApi
     */
    public findByIdXGroupMemberUsingGET(id: number, options?: any) {
        return XGroupMemberEntityApiFp(this.configuration).findByIdXGroupMemberUsingGET(id, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary saveXGroupMember
     * @param {XGroupMember} body body
     * @param {number} id id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof XGroupMemberEntityApi
     */
    public saveXGroupMemberUsingPATCH(body: XGroupMember, id: number, options?: any) {
        return XGroupMemberEntityApiFp(this.configuration).saveXGroupMemberUsingPATCH(body, id, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary saveXGroupMember
     * @param {XGroupMember} body body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof XGroupMemberEntityApi
     */
    public saveXGroupMemberUsingPOST(body: XGroupMember, options?: any) {
        return XGroupMemberEntityApiFp(this.configuration).saveXGroupMemberUsingPOST(body, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary saveXGroupMember
     * @param {XGroupMember} body body
     * @param {number} id id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof XGroupMemberEntityApi
     */
    public saveXGroupMemberUsingPUT(body: XGroupMember, id: number, options?: any) {
        return XGroupMemberEntityApiFp(this.configuration).saveXGroupMemberUsingPUT(body, id, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary xGroupMemberGroup
     * @param {number} id id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof XGroupMemberEntityApi
     */
    public xGroupMemberGroupUsingDELETE(id: number, options?: any) {
        return XGroupMemberEntityApiFp(this.configuration).xGroupMemberGroupUsingDELETE(id, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary xGroupMemberGroup
     * @param {number} id id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof XGroupMemberEntityApi
     */
    public xGroupMemberGroupUsingGET(id: number, options?: any) {
        return XGroupMemberEntityApiFp(this.configuration).xGroupMemberGroupUsingGET(id, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary xGroupMemberGroup
     * @param {string} body body
     * @param {number} id id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof XGroupMemberEntityApi
     */
    public xGroupMemberGroupUsingPATCH(body: string, id: number, options?: any) {
        return XGroupMemberEntityApiFp(this.configuration).xGroupMemberGroupUsingPATCH(body, id, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary xGroupMemberGroup
     * @param {string} body body
     * @param {number} id id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof XGroupMemberEntityApi
     */
    public xGroupMemberGroupUsingPOST(body: string, id: number, options?: any) {
        return XGroupMemberEntityApiFp(this.configuration).xGroupMemberGroupUsingPOST(body, id, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary xGroupMemberGroup
     * @param {string} body body
     * @param {number} id id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof XGroupMemberEntityApi
     */
    public xGroupMemberGroupUsingPUT(body: string, id: number, options?: any) {
        return XGroupMemberEntityApiFp(this.configuration).xGroupMemberGroupUsingPUT(body, id, options)(this.fetch, this.basePath);
    }

}

/**
 * XUserEntityApi - fetch parameter creator
 * @export
 */
export const XUserEntityApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary deleteXUser
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteXUserUsingDELETE(id: number, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling deleteXUserUsingDELETE.');
            }
            const localVarPath = `/api/data/dr-users/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary findAllXUser
         * @param {string} [page] page
         * @param {string} [size] size
         * @param {string} [sort] sort
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findAllXUserUsingGET(page?: string, size?: string, sort?: string, options: any = {}): FetchArgs {
            const localVarPath = `/api/data/dr-users`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary findByIdXUser
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findByIdXUserUsingGET(id: number, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling findByIdXUserUsingGET.');
            }
            const localVarPath = `/api/data/dr-users/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary find user and groups
         * @param {string} [username] username
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllUserAndGroupsXUserUsingGET(username?: string, options: any = {}): FetchArgs {
            const localVarPath = `/api/data/dr-users/search/getAllUserAndGroups`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (username !== undefined) {
                localVarQueryParameter['username'] = username;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary find all users and groups
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllUsersAndGroupsXUserUsingGET(options: any = {}): FetchArgs {
            const localVarPath = `/api/data/dr-users/search/getAllUsersAndGroups`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary find users and groups by group names
         * @param {Array<string>} [groups] groups
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllUsersInGroupsXUserUsingGET(groups?: Array<string>, options: any = {}): FetchArgs {
            const localVarPath = `/api/data/dr-users/search/getAllUsersInGroups`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (groups) {
                localVarQueryParameter['groups'] = groups;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary saveXUser
         * @param {XUser} body body
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saveXUserUsingPATCH(body: XUser, id: number, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling saveXUserUsingPATCH.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling saveXUserUsingPATCH.');
            }
            const localVarPath = `/api/data/dr-users/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PATCH' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"XUser" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary saveXUser
         * @param {XUser} body body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saveXUserUsingPOST(body: XUser, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling saveXUserUsingPOST.');
            }
            const localVarPath = `/api/data/dr-users`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"XUser" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary saveXUser
         * @param {XUser} body body
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saveXUserUsingPUT(body: XUser, id: number, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling saveXUserUsingPUT.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling saveXUserUsingPUT.');
            }
            const localVarPath = `/api/data/dr-users/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"XUser" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * XUserEntityApi - functional programming interface
 * @export
 */
export const XUserEntityApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary deleteXUser
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteXUserUsingDELETE(id: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = XUserEntityApiFetchParamCreator(configuration).deleteXUserUsingDELETE(id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary findAllXUser
         * @param {string} [page] page
         * @param {string} [size] size
         * @param {string} [sort] sort
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findAllXUserUsingGET(page?: string, size?: string, sort?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ResourcesOfXUser> {
            const localVarFetchArgs = XUserEntityApiFetchParamCreator(configuration).findAllXUserUsingGET(page, size, sort, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary findByIdXUser
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findByIdXUserUsingGET(id: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ResourceOfXUser> {
            const localVarFetchArgs = XUserEntityApiFetchParamCreator(configuration).findByIdXUserUsingGET(id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary find user and groups
         * @param {string} [username] username
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllUserAndGroupsXUserUsingGET(username?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ResourcesOfArrayOfobject> {
            const localVarFetchArgs = XUserEntityApiFetchParamCreator(configuration).getAllUserAndGroupsXUserUsingGET(username, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary find all users and groups
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllUsersAndGroupsXUserUsingGET(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ResourcesOfArrayOfobject> {
            const localVarFetchArgs = XUserEntityApiFetchParamCreator(configuration).getAllUsersAndGroupsXUserUsingGET(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary find users and groups by group names
         * @param {Array<string>} [groups] groups
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllUsersInGroupsXUserUsingGET(groups?: Array<string>, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ResourcesOfArrayOfobject> {
            const localVarFetchArgs = XUserEntityApiFetchParamCreator(configuration).getAllUsersInGroupsXUserUsingGET(groups, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary saveXUser
         * @param {XUser} body body
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saveXUserUsingPATCH(body: XUser, id: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ResourceOfXUser> {
            const localVarFetchArgs = XUserEntityApiFetchParamCreator(configuration).saveXUserUsingPATCH(body, id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary saveXUser
         * @param {XUser} body body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saveXUserUsingPOST(body: XUser, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ResourceOfXUser> {
            const localVarFetchArgs = XUserEntityApiFetchParamCreator(configuration).saveXUserUsingPOST(body, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary saveXUser
         * @param {XUser} body body
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saveXUserUsingPUT(body: XUser, id: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ResourceOfXUser> {
            const localVarFetchArgs = XUserEntityApiFetchParamCreator(configuration).saveXUserUsingPUT(body, id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * XUserEntityApi - factory interface
 * @export
 */
export const XUserEntityApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @summary deleteXUser
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteXUserUsingDELETE(id: number, options?: any) {
            return XUserEntityApiFp(configuration).deleteXUserUsingDELETE(id, options)(fetch, basePath);
        },
        /**
         * 
         * @summary findAllXUser
         * @param {string} [page] page
         * @param {string} [size] size
         * @param {string} [sort] sort
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findAllXUserUsingGET(page?: string, size?: string, sort?: string, options?: any) {
            return XUserEntityApiFp(configuration).findAllXUserUsingGET(page, size, sort, options)(fetch, basePath);
        },
        /**
         * 
         * @summary findByIdXUser
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findByIdXUserUsingGET(id: number, options?: any) {
            return XUserEntityApiFp(configuration).findByIdXUserUsingGET(id, options)(fetch, basePath);
        },
        /**
         * 
         * @summary find user and groups
         * @param {string} [username] username
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllUserAndGroupsXUserUsingGET(username?: string, options?: any) {
            return XUserEntityApiFp(configuration).getAllUserAndGroupsXUserUsingGET(username, options)(fetch, basePath);
        },
        /**
         * 
         * @summary find all users and groups
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllUsersAndGroupsXUserUsingGET(options?: any) {
            return XUserEntityApiFp(configuration).getAllUsersAndGroupsXUserUsingGET(options)(fetch, basePath);
        },
        /**
         * 
         * @summary find users and groups by group names
         * @param {Array<string>} [groups] groups
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllUsersInGroupsXUserUsingGET(groups?: Array<string>, options?: any) {
            return XUserEntityApiFp(configuration).getAllUsersInGroupsXUserUsingGET(groups, options)(fetch, basePath);
        },
        /**
         * 
         * @summary saveXUser
         * @param {XUser} body body
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saveXUserUsingPATCH(body: XUser, id: number, options?: any) {
            return XUserEntityApiFp(configuration).saveXUserUsingPATCH(body, id, options)(fetch, basePath);
        },
        /**
         * 
         * @summary saveXUser
         * @param {XUser} body body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saveXUserUsingPOST(body: XUser, options?: any) {
            return XUserEntityApiFp(configuration).saveXUserUsingPOST(body, options)(fetch, basePath);
        },
        /**
         * 
         * @summary saveXUser
         * @param {XUser} body body
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saveXUserUsingPUT(body: XUser, id: number, options?: any) {
            return XUserEntityApiFp(configuration).saveXUserUsingPUT(body, id, options)(fetch, basePath);
        },
    };
};

/**
 * XUserEntityApi - object-oriented interface
 * @export
 * @class XUserEntityApi
 * @extends {BaseAPI}
 */
export class XUserEntityApi extends BaseAPI {
    /**
     * 
     * @summary deleteXUser
     * @param {number} id id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof XUserEntityApi
     */
    public deleteXUserUsingDELETE(id: number, options?: any) {
        return XUserEntityApiFp(this.configuration).deleteXUserUsingDELETE(id, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary findAllXUser
     * @param {string} [page] page
     * @param {string} [size] size
     * @param {string} [sort] sort
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof XUserEntityApi
     */
    public findAllXUserUsingGET(page?: string, size?: string, sort?: string, options?: any) {
        return XUserEntityApiFp(this.configuration).findAllXUserUsingGET(page, size, sort, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary findByIdXUser
     * @param {number} id id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof XUserEntityApi
     */
    public findByIdXUserUsingGET(id: number, options?: any) {
        return XUserEntityApiFp(this.configuration).findByIdXUserUsingGET(id, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary find user and groups
     * @param {string} [username] username
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof XUserEntityApi
     */
    public getAllUserAndGroupsXUserUsingGET(username?: string, options?: any) {
        return XUserEntityApiFp(this.configuration).getAllUserAndGroupsXUserUsingGET(username, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary find all users and groups
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof XUserEntityApi
     */
    public getAllUsersAndGroupsXUserUsingGET(options?: any) {
        return XUserEntityApiFp(this.configuration).getAllUsersAndGroupsXUserUsingGET(options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary find users and groups by group names
     * @param {Array<string>} [groups] groups
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof XUserEntityApi
     */
    public getAllUsersInGroupsXUserUsingGET(groups?: Array<string>, options?: any) {
        return XUserEntityApiFp(this.configuration).getAllUsersInGroupsXUserUsingGET(groups, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary saveXUser
     * @param {XUser} body body
     * @param {number} id id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof XUserEntityApi
     */
    public saveXUserUsingPATCH(body: XUser, id: number, options?: any) {
        return XUserEntityApiFp(this.configuration).saveXUserUsingPATCH(body, id, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary saveXUser
     * @param {XUser} body body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof XUserEntityApi
     */
    public saveXUserUsingPOST(body: XUser, options?: any) {
        return XUserEntityApiFp(this.configuration).saveXUserUsingPOST(body, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary saveXUser
     * @param {XUser} body body
     * @param {number} id id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof XUserEntityApi
     */
    public saveXUserUsingPUT(body: XUser, id: number, options?: any) {
        return XUserEntityApiFp(this.configuration).saveXUserUsingPUT(body, id, options)(this.fetch, this.basePath);
    }

}

